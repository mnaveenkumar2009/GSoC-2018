#include "wclock.ceu"
{
    int SLA;
    int count=1,RXBuffLen=0;
    volatile int RXBuffIndex=0;
    int requestmode=-1;
    int errorcode=1;
    int twi_receive_buffer[32];
    int i;
}
#define TXMAXBUFLEN 32
var[32] u8 twi_receive_buffer;
var u8 i;

loop i in [1->TXMAXBUFLEN] do
    twi_receive_buffer = twi_receive_buffer .. [0];
end

output (u8 address,byte&& buffer,u8 n_byte) I2C_REQUEST_RECEIVE do
    outer.requestmode=1;    // read mode
    SLA=address;
    RXBuffLen=n_byte;
  	RXBuffIndex=0;
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE);
    for(i =0;i<n_byte;i++)
        buffer[i] = twi_receive_buffer[i] ;
end

{
    pinMode(6,INPUT_PULLUP);
    TWBR = ((F_CPU / 100000L) - 16) / 2;
    Serial.begin(9600);
}
void loop(){
  int getD[5];
    I2C_REQUEST_RECEIVE(4,getD,5);
  delay(300);
}


spawn async/isr [_TWI_vect] do
{
  switch(TW_STATUS){
    
    case TW_START:
        errorcode = 0;
        if(requestmode!=-1){
            TWDR = (SLA << 1) | (requestmode); // SLA + Read/Write
            requestmode=-1;
        }
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE); // Continue Transfer
        break;
      
      case TW_MR_SLA_ACK:
          if(RXBuffIndex<RXBuffLen){
            TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE)|(1<<TWEA);
          }
          else{
            Serial.println(4);
              TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE) | (1<<TWSTO);
          }
          break;
    case TW_MR_DATA_ACK:
    		if(RXBuffIndex<RXBuffLen)
            {
              twi_receive_buffer[RXBuffIndex++] = TWDR;
             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE)|(1<<TWEA);
            }
    		else
            {
          TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO) | (1<<TWIE);              
            }
	  break;
      case TW_REP_START: 
      		TWDR = (SLA << 1) | requestmode;
    		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE)|(1<<TWEA);
    		break;
      case TW_MR_SLA_NACK:
      case TW_MR_DATA_NACK:
          errorcode=2;// in case of slave not connected or receiving NACK from slave
          break;
      default:
          errorcode=3;
          TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO) | (1<<TWIE);//default case sends stop condition
    }
}
end
