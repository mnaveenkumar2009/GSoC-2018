#ifndef CEU_I2C
#define CEU_I2C
    //////////////////////TWI
    #include "arduino/avr.ceu"
    #include "arduino/arduino.ceu"
    
    native/pre do
        #ifndef TWI_FREQ
        #define TWI_FREQ 100000L
        #endif

        #ifndef TWI_BUFFER_LENGTH
        #define TWI_BUFFER_LENGTH 32
        #endif

        #define TWI_READY 0
        #define TWI_MRX   1
        #define TWI_MTX   2
        #define TWI_SRX   3
        #define TWI_STX   4


        #ifndef cbi
        #define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
        #endif

        #ifndef sbi
        #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
        #endif

        static volatile uint8_t twi_state;
        static volatile uint8_t twi_slarw;
        static volatile uint8_t twi_sendStop;			// should the transaction end with a stop
        static volatile uint8_t twi_inRepStart;			// in the middle of a repeated start

        static void (*twi_onSlaveTransmit)(void);
        static void (*twi_onSlaveReceive)(uint8_t*, int);

        static uint8_t twi_masterBuffer[TWI_BUFFER_LENGTH];
        static volatile uint8_t twi_masterBufferIndex;
        static volatile uint8_t twi_masterBufferLength;

        static uint8_t twi_txBuffer[TWI_BUFFER_LENGTH];
        static volatile uint8_t twi_txBufferIndex;
        static volatile uint8_t twi_txBufferLength;

        static uint8_t twi_rxBuffer[TWI_BUFFER_LENGTH];
        static volatile uint8_t twi_rxBufferIndex;

        static volatile uint8_t twi_error;
        void twi_init(void)
        {
            // initialize state
            twi_state = TWI_READY;
            twi_sendStop = true;		// default value
            twi_inRepStart = false;
            
            // activate internal pullups for twi.
            digitalWrite(SDA, 1);
            digitalWrite(SCL, 1);

            // initialize twi prescaler and bit rate
            cbi(TWSR, TWPS0);
            cbi(TWSR, TWPS1);
            TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;

            /* twi bit rate formula from atmega128 manual pg 204
            SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
            note: TWBR should be 10 or higher for master mode
            It is 72 for a 16mhz Wiring board with 100kHz TWI */

            // enable twi module, acks, and twi interrupt
            TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
        }

        void twi_disable(void)
        {
        // disable twi module, acks, and twi interrupt
        TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));

        // deactivate internal pullups for twi.
        digitalWrite(SDA, 0);
        digitalWrite(SCL, 0);
        }
    end
    native
        _twi_init,
        _twi_disable,
    ;
    /////////////////////Wire

    #define BUFFER_LENGTH 32

    // WIRE_HAS_END means Wire has end()
    #define WIRE_HAS_END 1
    var[BUFFER_LENGTH] u8 rxBuffer;
    var u8 rxBufferIndex = 0;
    var u8 rxBufferLength = 0;

    var u8 txAddress = 0;
    var[BUFFER_LENGTH] u8 txBuffer;
    var u8 txBufferIndex = 0;
    var u8 txBufferLength = 0;

    var u8 transmitting = 0;

    output on/off I2C;

    output (on/off v) I2C do
        if v then
            outer.rxBufferIndex = 0;
            outer.rxBufferLength = 0;
            outer.txBufferIndex = 0;
            outer.txBufferLength = 0;
            _twi_init();
        else
            _twi_disable();
        end
    end
    /*
    output (u8,byte&&,u8) I2C_REQUEST_SEND;
    output (u8,byte&&,u8) I2C_REQUEST_RECEIVE;
    input u8 I2C_REQUEST_DONE;

    output (u8 address,byte&& buffer,u8 number_of_bytes) I2C_REQUEST_SEND do

        outer.txAddress = address;// set address of targeted slave
        // reset tx buffer iterator vars
        outer.txBufferIndex = 0;
        outer.txBufferLength = 0;
        
        // put byte in tx buffer
        outer.txBuffer[outer.txBufferIndex] = data;
        ++outer.txBufferIndex;
        // update amount in buffer   
        outer.txBufferLength = outer.txBufferIndex;
            
        // transmit buffer (blocking)
        u8 ret = _twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
        // reset tx buffer iterator vars
        txBufferIndex = 0;
        txBufferLength = 0;
        
        //return ret;
    end
    */
#endif