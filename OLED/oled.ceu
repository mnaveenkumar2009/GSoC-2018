#include "i2c.ceu"
#include "../oled.ceu"

native/pre do
    #include "oled.h"
end

native
    _buffer
;

var u8 oled_i2c_address = 0x3C;
var u8 rst=_;
var u8 vccstate=_;

code/await Oled_command(var u8 c) -> none
do
    outer.tx_buf=[0,c];
    emit I2C_MASTER_SEND(outer.oled_i2c_address);
    await I2C_DONE;
end

code/await Oled(var on/off v, var u8 vccstate, var u8? i2caddr, var bool reset, var u8 rst) -> none
do
    if v then
        emit I2C(on,_);
        outer.rst = rst;
        if i2caddr? then
                outer.oled_i2c_address = i2caddr! ;
        end

        outer.vccstate = vccstate;
        {
            #ifdef __SAM3X8E__
                    // Force 400 KHz I2C, rawr! (Uses pins 20, 21 for SDA, SCL)
                    TWI1->TWI_CWGR = 0;
                    TWI1->TWI_CWGR = ((VARIANT_MCK / (2 * 400000)) - 4) * 0x101;
            #endif
        }
        
        if (reset) and (outer.rst >= 0) then
            {
            pinMode(@outer.rst, OUTPUT);// Setup reset pin direction (used by both SPI and I2C)
            digitalWrite(@outer.rst, HIGH);
            // VDD (3.3V) goes high at start, lets just chill for a ms
            delay(1);
            // bring reset low
            digitalWrite(@outer.rst, LOW);
            // wait 10ms
            delay(10);
            // bring out of reset
            digitalWrite(@outer.rst, HIGH);
            // turn on VCC (9V?)
            }
        end

        // Init sequence
        await Oled_command({SSD1306_DISPLAYOFF});                         // 0xAE
        await Oled_command({SSD1306_SETDISPLAYCLOCKDIV});               // 0xD5
        await Oled_command(0x80);                                           // the suggested ratio 0x80

        await Oled_command({SSD1306_SETMULTIPLEX});                       // 0xA8
        await Oled_command({SSD1306_LCDHEIGHT} - 1);

        await Oled_command({SSD1306_SETDISPLAYOFFSET});                  // 0xD3
        await Oled_command(0x0);                 
        await Oled_command({SSD1306_SETSTARTLINE} | 0x0);               // line #0
        await Oled_command({SSD1306_CHARGEPUMP});                         // 0x8D
        if vccstate == {SSD1306_EXTERNALVCC} then
            await Oled_command(0x10);
        else
            await Oled_command(0x14);
        end
        await Oled_command({SSD1306_MEMORYMODE});                         // 0x20
        await Oled_command(0x00);                                           // 0x0 act like ks0108
        await Oled_command({SSD1306_SEGREMAP} | 0x1);
        await Oled_command({SSD1306_COMSCANDEC});



        await Oled_command({SSD1306_SETCOMPINS});                         // 0xDA
        await Oled_command(0x12);
        await Oled_command({SSD1306_SETCONTRAST});                                     // 0x81
        if vccstate == {SSD1306_EXTERNALVCC} then
            await Oled_command(0x9F);
        else
            await Oled_command(0xCF);
        end

        await Oled_command({SSD1306_SETPRECHARGE});                       // 0xd9
        if vccstate == {SSD1306_EXTERNALVCC} then
            await Oled_command(0x22);
        else
            await Oled_command(0xF1);
        end
        await Oled_command({SSD1306_SETVCOMDETECT});                                 // 0xDB
        await Oled_command(0x40);
        await Oled_command({SSD1306_DISPLAYALLON_RESUME});                     // 0xA4
        await Oled_command({SSD1306_NORMALDISPLAY});                                 // 0xA6

        await Oled_command({SSD1306_DEACTIVATE_SCROLL});

        await Oled_command({SSD1306_DISPLAYON});//--turn on oled panel
    else
        emit I2C(off,_);
    end
end


code/await Oled_display(none) -> none
do
    await Oled_command({SSD1306_COLUMNADDR});
    await Oled_command(0);   // Column start address (0 = reset)
    await Oled_command({SSD1306_LCDWIDTH}-1); // Column end address (127 = reset)

    await Oled_command({SSD1306_PAGEADDR});
    await Oled_command(0);
    await Oled_command(({SSD1306_LCDHEIGHT}/8)-1);

    var u16 i = 0;
    loop do
        outer.tx_buf = [0x40];
        var u8 x;
        loop x in [0->15] do
            outer.tx_buf = outer.tx_buf .. [_buffer[i]];
            i=i+1;
        end
        emit I2C_MASTER_SEND(outer.oled_i2c_address);
        await I2C_DONE;
        if i >= {(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)} then
            break;
        end
    end
end

code/await Oled_clear_display(none) -> none
do
    var u16 i;
    loop i in [0->2047] do
        _buffer[i] = 0;
    end
end

code/await Oled_draw_pixel(var u8 x, var u8 y, var bool draw) -> none
do
    if draw then
        _buffer[x+ (y/8)*{SSD1306_LCDWIDTH}] =  _buffer[x+ (y/8)*{SSD1306_LCDWIDTH}] | (1 << (y&7));
    else
        _buffer[x+ (y/8)*{SSD1306_LCDWIDTH}] = _buffer[x+ (y/8)*{SSD1306_LCDWIDTH}] & ~(1 << (y&7));
    end
end