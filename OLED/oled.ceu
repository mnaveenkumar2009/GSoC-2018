#include "i2c.ceu"
#include "../oled.ceu"
var u8 oled_i2c_address = 0x3C;
var u8 buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8] = [
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,192,
128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,
255,255,254,252,252,248,240,192,128,128,192,192,192,192,192,224,
224,224,224,224,224,240,48,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,128,128,192,192,224,224,240,240,248,255,255,255,127,
63,3,0,1,3,7,15,15,15,15,7,7,199,247,255,255,
255,255,63,7,3,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,128,192,192,224,224,224,224,240,240,240,242,
242,231,231,239,239,223,223,191,191,127,127,253,252,252,248,240,
240,128,0,0,0,128,128,192,192,224,224,227,239,255,255,255,
255,252,240,224,224,224,192,192,128,0,0,0,0,0,0,0,
0,128,128,128,0,0,128,128,128,128,0,128,0,0,128,128,
0,0,0,0,0,0,0,0,0,128,128,128,128,0,0,128,
128,128,0,128,128,128,224,0,0,128,0,0,128,0,32,224,
0,128,128,128,128,128,0,0,128,128,128,0,0,0,0,192,
240,252,254,255,255,255,127,31,15,15,7,7,3,3,3,3,
3,7,7,7,15,15,31,63,255,255,255,254,252,255,255,255,
255,255,252,254,255,255,63,31,15,15,7,7,7,131,131,131,
3,3,7,7,15,15,31,127,255,255,255,254,252,240,192,0,
7,13,8,13,5,2,15,10,14,7,0,15,12,12,15,15,
0,1,1,1,1,1,1,0,2,15,8,8,15,0,0,15,
0,0,2,15,8,8,15,0,0,15,8,12,15,0,0,15,
0,15,15,0,0,15,0,7,13,8,13,7,0,0,0,255,
255,255,255,255,255,128,0,0,0,28,28,28,28,28,28,28,
28,28,28,28,28,0,0,0,0,193,227,255,255,255,255,255,
255,255,255,227,193,0,0,0,0,0,30,30,30,255,255,255,
30,30,30,0,0,0,0,0,128,255,255,255,255,255,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
7,31,63,127,255,255,254,252,248,240,240,224,224,224,224,224,
224,224,224,240,240,248,252,254,255,255,127,63,31,15,3,3,
15,31,63,127,255,255,254,252,248,240,240,224,224,224,224,224,
224,224,224,240,240,248,252,254,255,255,127,63,31,7,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,3,3,3,3,7,7,7,7,7,
7,7,7,7,3,3,3,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,3,3,3,7,7,7,7,7,7,
7,7,7,3,3,3,3,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

code/await Oled_command(var u8 c) -> none
do
        outer.twi_request_buffer=[0,c];
        emit I2C_REQUEST_SEND(outer.oled_i2c_address);
        await I2C_REQUEST_DONE;
end

code/await Oled(var on/off, var u8 vccstate, var u8? i2caddr, var bool reset) -> none
do
    if v then
      emit I2C(on);
      if i2caddr? then
            outer.oled_i2c_address = i2caddr! ;
      end
      outer.vccstate = vccstate
      {
          #ifdef __SAM3X8E__
                  // Force 400 KHz I2C, rawr! (Uses pins 20, 21 for SDA, SCL)
                  TWI1->TWI_CWGR = 0;
                  TWI1->TWI_CWGR = ((VARIANT_MCK / (2 * 400000)) - 4) * 0x101;
          #endif
      }


      if ((reset) && (rst >= 0)) {
          // Setup reset pin direction (used by both SPI and I2C)
          pinMode(rst, OUTPUT);
          digitalWrite(rst, HIGH);
          // VDD (3.3V) goes high at start, lets just chill for a ms
          delay(1);
          // bring reset low
          digitalWrite(rst, LOW);
          // wait 10ms
          delay(10);
          // bring out of reset
          digitalWrite(rst, HIGH);
          // turn on VCC (9V?)
      }

      // Init sequence
      await Oled_command(SSD1306_DISPLAYOFF);                         // 0xAE
      await Oled_command(SSD1306_SETDISPLAYCLOCKDIV);               // 0xD5
      await Oled_command(0x80);                                           // the suggested ratio 0x80

      await Oled_command(SSD1306_SETMULTIPLEX);                       // 0xA8
      await Oled_command(SSD1306_LCDHEIGHT - 1);

      await Oled_command(SSD1306_SETDISPLAYOFFSET);                  // 0xD3
      await Oled_command(0x0);                                                                     // no offset
      await Oled_command(SSD1306_SETSTARTLINE | 0x0);               // line #0
      await Oled_command(SSD1306_CHARGEPUMP);                         // 0x8D
      if (vccstate == SSD1306_EXTERNALVCC)
          { await Oled_command(0x10); }
      else
          { await Oled_command(0x14); }
      await Oled_command(SSD1306_MEMORYMODE);                         // 0x20
      await Oled_command(0x00);                                           // 0x0 act like ks0108
      await Oled_command(SSD1306_SEGREMAP | 0x1);
      await Oled_command(SSD1306_COMSCANDEC);



      await Oled_command(SSD1306_SETCOMPINS);                         // 0xDA
      await Oled_command(0x12);
      await Oled_command(SSD1306_SETCONTRAST);                                     // 0x81
      if (vccstate == SSD1306_EXTERNALVCC)
          { await Oled_command(0x9F); }
      else
          { await Oled_command(0xCF); }


      await Oled_command(SSD1306_SETPRECHARGE);                       // 0xd9
      if (vccstate == SSD1306_EXTERNALVCC)
          { await Oled_command(0x22); }
      else
          { await Oled_command(0xF1); }
      await Oled_command(SSD1306_SETVCOMDETECT);                                 // 0xDB
      await Oled_command(0x40);
      await Oled_command(SSD1306_DISPLAYALLON_RESUME);                     // 0xA4
      await Oled_command(SSD1306_NORMALDISPLAY);                                 // 0xA6

      await Oled_command(SSD1306_DEACTIVATE_SCROLL);

      await Oled_command(SSD1306_DISPLAYON);//--turn on oled panel
    else
      emit I2C(off);
    end
end